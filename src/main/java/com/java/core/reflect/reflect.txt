1.创建Class对象的方法：
    object.getClass()
    Class.forName("className")
    Object.class
2.一个Class对象实际表示的是一个类型，但此类型未必一定是一种类；
    Class cl = int.class;
3.JVM为每个类型管理一个Class对象，所以可以使用 == 运算符实现两个类对象的比较操作。
4.Class对象的常用方法：
    getName()      获取类名
    newInstance()  用于动态创建一个类的实例
    getFields()     返回public域数组     包含超类的公有成员
    getMethods()    返回public方法数组    包含超类的公有成员
    getConstructors()  返回public构造器数组    包含超类的公有成员
    Class 类的 getDeclareFields、getDeclareMethods 和 getDeclaredConstructors 方法将分别返回类中声明的全部域、 方法和构造器， 其中包括私有和受保护成员，但不包括超类的成员
5.如果需要调用带有参数的类构造器创建某个类的实例，则需要使用Constructor类中的newInstance方法
    String s = "java.util.Random";
    //Object m = Class.forName(s).newInstance();
6.反射机制的能力————检查类的结构
    Field
        getName()   返回名称
        getType()   返回描述域所属类型的Class对象
        getModifiers()  返回一个整型数值，用不同的位开关描述public和static的修饰符使用状况
    Method
        getName()   返回名称
        getModifiers()  返回一个整型数值，用不同的位开关描述public和static的修饰符使用状况
        获取参数类型
        获取返回类型
    Constructor
        getName()   返回名称
        getModifiers()  返回一个整型数值，用不同的位开关描述public和static的修饰符使用状况
        获取参数类型
