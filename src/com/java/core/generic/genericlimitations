Java泛型有如下限制（大部分限制都是由类型擦除引起的）：
    1.不能用基本类型实例化类型数据
    2.运行时类型查询只适用于原始类型
    3.不能创建参数化的数组
        Pair<String> [] table = new Pair<String>[10];//Error
        Varargs警告：
            @SuppressWarnings("unchecked")  @SafeVarargs
        a.使用数组构造器表达式
        public static <T extends Comparable〉T[] minmax(IntFunction<TD> constr, T... a)
        {
            T [] mm = constr.apply(2);
        }
        String [] ss = ArrayAlg.minmax(String口：:new，"Tom", "Dick", "Harry");
        b.利用反射
        public static <T extends Comparable〉T[] minmax(T... a)
        {
            T[] mm = (T[]) Array.newlnstance(a.getClass().getComponentType() , 2);
        }

    4.不能实例化类型变量
        a.使用构造器表达式
        public static <T> Pair<T> makePair(Supplier<T> constr){
            return new Pair<>(constr.get(),constr.get());
        }
        Pair<String> p = Pair.makePair(String::new);
        b.使用反射
        public static <T> Pair<T> makePair(Class<T> cl){
            try{
                return new Pair<>(cl.newInstance(),cl.newInstance());
            }catch(Exception ex){
                return null;
            }
        }

        Pair<String> p = Pair.makePair(String.class);
    5.泛型类的静态上下文中类型变量无效
    6.不能抛出或捕获泛型类的实例
    public static <T extends Throwable〉void doWork(T t) throws T // OK
    {
        try
        {
            do work
        }
        catch (Throwable real Cause)
        {
            t.initCause(real Cause) ;
            throw t ;
        }
    }
    7.使用@SuppressWarnings("unchecked") 消除对受查异常的检查
泛型的继承规则：
通配符类型：带有超类型限定的通配符可以向泛型对象写入，带有子类型限定的通配符可以从泛型对象读取。
    ? extends Employee 子类型
        只能获取方法返回值，但不能为方法提供参数。
    ? super Employee  超类型
        只能为方法提供参数，不能使用返回值
    无限定通配符 ?
        允许使用任意Object对象调用该泛型方法
