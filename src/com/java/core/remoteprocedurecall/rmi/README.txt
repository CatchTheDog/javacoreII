分布式对象：
   远程调用代理实现方式：
     1.RMI Java的远程方法调用技术，支持Java的分布式对象之间的方法调用
     2.CORBA 通过对象请求代理架构，支持跨编程语言之间的方法调用，接口描述语言IDL
     3.WS-*  独立于编程语言，使用基于XML的通信方式，用于传输对象的格式则是简单对象访问协议SOAP,接口描述语言WSDL

  存根：客户端代理对象
  参数编组：存根将远程方法所需的参数打包成一组字节，对参数编码的过程称为参数编组，参数编组的目的是将参数转换成适合在虚拟机之间进行传递的格式。

  远程方法调用过程：
  存根制造一个信息块，它由以下几部分组成：
    被使用远程对象的标志符
    被调用的方法的描述
    编组后的参数
  然后，存根将此信息发送至服务器，在服务端，接受对象执行以下动作：
    定位要调用的远程对象
    调用所需的方法并传递客户端提供的参数
    捕获返回值或者该调用产生的异常
    将返回值编组，打包送回给客户端存根
  最后，客户端存根对来自服务器的返回值或者异常进行反编组，然后返回返回值或者抛出异常。


远程对象的接口必须扩展Remote接口，而且接口中所有方法必须声明抛出RemoteException异常。
远程方法调用的目标需要继承自UnicastRemoteObject,此类构造器使得它的对象可供远程访问。如果目标已经继承其他类，无法再继承UnicastRemoteObject类，则需要手动初始化远程目标对象，
然后将远程目标对象传递给UnicastRemoteObject的静态方法exportObject.

